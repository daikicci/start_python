# Задание 3.
# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его
# конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть
# реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение
# (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

class Cell:

    def __init__(self, cell: int):
        self.cell = cell

    def __str__(self):
        return f'{self.cell}'

    def __add__(self, other):
        print('Складываем клетки, ячеек в новой клетке: ')
        return Cell(self.cell + other.cell)

    def __sub__(self, other):
        if self.cell - other.cell <= 0:
            return 'Новую клетку создать невозможно.'
        print('Вычитаем клетки, ячеек в новой клетке: ')
        return Cell(self.cell - other.cell)

    def __mul__(self, other):
        print('Умножаем клетки, ячеек в новой клетке: ')
        return Cell(self.cell * other.cell)

    def __floordiv__(self, other):
        if self.cell // other.cell == 0:
            return 'Новую клетку создать невозможно.'
        print('Делим клетки, ячеек в новой клетке: ')
        return Cell(self.cell // other.cell)

    def make_order(self, quantity: int):
        cell_str = '*' * self.cell
        cell_for_print = ''
        i = 0
        while self.cell > i:
            cell_for_print += f'{cell_str[i:i + quantity]}\n'
            i = i + quantity
        else:
            print(f'Выводим красиво по {quantity}: ')
            return cell_for_print


cell_1 = Cell(5)
cell_2 = Cell(14)

print(cell_1 + cell_2)
print()
print(cell_1 - cell_2)
print()
print(cell_2 - cell_1)
print()
print(cell_1 * cell_2)
print()
print(cell_1 // cell_2)
print()
print(cell_2 // cell_1)
print()
print(cell_2.make_order(4))
print(cell_2.make_order(5))
print(cell_2.make_order(6))
